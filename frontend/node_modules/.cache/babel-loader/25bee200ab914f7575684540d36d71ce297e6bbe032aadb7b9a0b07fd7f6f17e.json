{"ast":null,"code":"// src/components/PrivateRoute.jsx\nimport{Navigate,useLocation}from\"react-router-dom\";import{useAuth}from\"../context/AuthContext\";import{jsx as _jsx}from\"react/jsx-runtime\";const PrivateRoute=_ref=>{let{children}=_ref;const{isAuthenticated,loading}=useAuth();const location=useLocation();console.log(\"isAuthenticated:\",isAuthenticated);// Check if this is true after login\nif(loading)return/*#__PURE__*/_jsx(\"p\",{children:\"Loading...\"});return isAuthenticated?children:/*#__PURE__*/_jsx(Navigate,{to:\"/login\",state:{from:location},replace:true});};export default PrivateRoute;","map":{"version":3,"names":["Navigate","useLocation","useAuth","jsx","_jsx","PrivateRoute","_ref","children","isAuthenticated","loading","location","console","log","to","state","from","replace"],"sources":["/Users/vihangawagholkar/Desktop/firewatch/frontend/src/components/PrivateRoutes.jsx"],"sourcesContent":["// src/components/PrivateRoute.jsx\nimport { Navigate, useLocation } from \"react-router-dom\";\nimport { useAuth } from \"../context/AuthContext\";\n\nconst PrivateRoute = ({ children }) => {\n  const { isAuthenticated, loading } = useAuth();\n  const location = useLocation();\n  console.log(\"isAuthenticated:\", isAuthenticated);  // Check if this is true after login\n\n  if (loading) return <p>Loading...</p>;\n\n  return isAuthenticated ? children : <Navigate to=\"/login\" state={{ from: location }} replace />;\n};\n\nexport default PrivateRoute;"],"mappings":"AAAA;AACA,OAASA,QAAQ,CAAEC,WAAW,KAAQ,kBAAkB,CACxD,OAASC,OAAO,KAAQ,wBAAwB,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAEjD,KAAM,CAAAC,YAAY,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CAChC,KAAM,CAAEE,eAAe,CAAEC,OAAQ,CAAC,CAAGP,OAAO,CAAC,CAAC,CAC9C,KAAM,CAAAQ,QAAQ,CAAGT,WAAW,CAAC,CAAC,CAC9BU,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAEJ,eAAe,CAAC,CAAG;AAEnD,GAAIC,OAAO,CAAE,mBAAOL,IAAA,MAAAG,QAAA,CAAG,YAAU,CAAG,CAAC,CAErC,MAAO,CAAAC,eAAe,CAAGD,QAAQ,cAAGH,IAAA,CAACJ,QAAQ,EAACa,EAAE,CAAC,QAAQ,CAACC,KAAK,CAAE,CAAEC,IAAI,CAAEL,QAAS,CAAE,CAACM,OAAO,MAAE,CAAC,CACjG,CAAC,CAED,cAAe,CAAAX,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}